name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}-backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}-frontend

jobs:
  # Backend Testing and Linting
  backend-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx flake8 black isort mypy
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 backend/ finetune.py --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 backend/ finetune.py --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Format check with black
      run: |
        black --check backend/ finetune.py
    
    - name: Import sorting check with isort
      run: |
        isort --check-only backend/ finetune.py
    
    - name: Type checking with mypy
      run: |
        mypy backend/ --ignore-missing-imports
    
    - name: Run backend tests
      run: |
        cd backend
        python -m pytest ../tests/test_backend.py -v
      env:
        PYTHONPATH: ${{ github.workspace }}

  # Frontend Testing and Linting
  frontend-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: TypeScript type checking
      run: |
        cd frontend
        npx tsc --noEmit
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build
    
    - name: Run frontend tests
      run: |
        cd frontend
        npm test
      continue-on-error: true  # Allow to continue if no tests are defined yet

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Docker Build and Test
  docker-build:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build backend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: backend/Dockerfile
        push: false
        tags: sentiment-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build frontend image
      uses: docker/build-push-action@v5
      with:
        context: frontend
        file: frontend/Dockerfile
        push: false
        tags: sentiment-frontend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker Compose
      run: |
        # Create a test docker-compose file
        cat > docker-compose.test.yml << EOF
        version: '3.8'
        services:
          backend:
            image: sentiment-backend:test
            ports:
              - "8000:8000"
            environment:
              - PYTHONUNBUFFERED=1
            healthcheck:
              test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
              interval: 30s
              timeout: 10s
              retries: 3
              start_period: 40s
        
          frontend:
            image: sentiment-frontend:test
            ports:
              - "3000:3000"
            depends_on:
              backend:
                condition: service_healthy
        EOF
        
        # Start services and test
        docker-compose -f docker-compose.test.yml up -d
        
        # Wait for services to be ready
        sleep 60
        
        # Test backend health
        curl -f http://localhost:8000/health || exit 1
        
        # Test prediction endpoint
        curl -X POST "http://localhost:8000/predict" \
             -H "Content-Type: application/json" \
             -d '{"text": "I love this product!"}' || exit 1
        
        # Test frontend is serving
        curl -f http://localhost:3000 || exit 1
        
        # Cleanup
        docker-compose -f docker-compose.test.yml down
