name: Deploy to Production

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}-backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}-frontend

jobs:
  # Build and Push Docker Images
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    outputs:
      backend-image: ${{ steps.meta-backend.outputs.tags }}
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
      backend-digest: ${{ steps.build-backend.outputs.digest }}
      frontend-digest: ${{ steps.build-frontend.outputs.digest }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
    
    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
    
    - name: Build and push backend image
      id: build-backend
      uses: docker/build-push-action@v5
      with:
        context: .
        file: backend/Dockerfile
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
    
    - name: Build and push frontend image
      id: build-frontend
      uses: docker/build-push-action@v5
      with:
        context: frontend
        file: frontend/Dockerfile
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # Generate deployment manifests
  generate-manifests:
    runs-on: ubuntu-latest
    needs: build-and-push
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Generate Kubernetes manifests
      run: |
        mkdir -p k8s
        
        # Backend deployment
        cat > k8s/backend-deployment.yaml << EOF
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: sentiment-backend
          labels:
            app: sentiment-backend
        spec:
          replicas: 2
          selector:
            matchLabels:
              app: sentiment-backend
          template:
            metadata:
              labels:
                app: sentiment-backend
            spec:
              containers:
              - name: backend
                image: ${{ needs.build-and-push.outputs.backend-image }}
                ports:
                - containerPort: 8000
                env:
                - name: PYTHONUNBUFFERED
                  value: "1"
                resources:
                  requests:
                    memory: "1Gi"
                    cpu: "500m"
                  limits:
                    memory: "2Gi"
                    cpu: "1000m"
                livenessProbe:
                  httpGet:
                    path: /health
                    port: 8000
                  initialDelaySeconds: 30
                  periodSeconds: 10
                readinessProbe:
                  httpGet:
                    path: /health
                    port: 8000
                  initialDelaySeconds: 5
                  periodSeconds: 5
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: sentiment-backend-service
        spec:
          selector:
            app: sentiment-backend
          ports:
          - port: 8000
            targetPort: 8000
          type: ClusterIP
        EOF
        
        # Frontend deployment
        cat > k8s/frontend-deployment.yaml << EOF
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: sentiment-frontend
          labels:
            app: sentiment-frontend
        spec:
          replicas: 2
          selector:
            matchLabels:
              app: sentiment-frontend
          template:
            metadata:
              labels:
                app: sentiment-frontend
            spec:
              containers:
              - name: frontend
                image: ${{ needs.build-and-push.outputs.frontend-image }}
                ports:
                - containerPort: 3000
                resources:
                  requests:
                    memory: "128Mi"
                    cpu: "100m"
                  limits:
                    memory: "256Mi"
                    cpu: "200m"
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: sentiment-frontend-service
        spec:
          selector:
            app: sentiment-frontend
          ports:
          - port: 3000
            targetPort: 3000
          type: LoadBalancer
        EOF
    
    - name: Upload Kubernetes manifests
      uses: actions/upload-artifact@v3
      with:
        name: k8s-manifests
        path: k8s/

  # Create GitHub Release
  create-release:
    runs-on: ubuntu-latest
    needs: [build-and-push, generate-manifests]
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Download Kubernetes manifests
      uses: actions/download-artifact@v3
      with:
        name: k8s-manifests
        path: k8s/
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          k8s/*.yaml
          docker-compose.yml
          README.md
        body: |
          ## ðŸš€ Release ${{ github.ref_name }}
          
          ### Docker Images
          - Backend: `${{ needs.build-and-push.outputs.backend-image }}`
          - Frontend: `${{ needs.build-and-push.outputs.frontend-image }}`
          
          ### Deployment
          Use the included Kubernetes manifests or Docker Compose file for deployment.
          
          ### Quick Start
          ```bash
          docker-compose up -d
          ```
          
          Access the application at:
          - Frontend: http://localhost:3000
          - Backend API: http://localhost:8000
          - API Documentation: http://localhost:8000/docs
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
